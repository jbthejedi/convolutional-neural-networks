import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms as T

from torch.utils.data import DataLoader, random_split
from torchvision.datasets import CIFAR10
from tqdm import tqdm
from dataclasses import dataclass
from convolution2d import MyConv2d

device = 'cuda' if torch.cuda.is_available() else 'cpu'

@dataclass
class TrainingConfig:
    batch_size : int = 32
    n_epochs : int = 1
    image_size : int = 32
    normalize_shape : tuple = ((0.5,), (0.5,), (0.5,))
    train_split : float = 0.8

# IOKSP
class BasicBlock(nn.Module):
    def __init__(self, in_channels, out_channels, stride=1):
        self.conv1 = MyConv2d(
            in_channels, out_channels,
            kernel_size=3, stride=stride, padding=1, bias=False
        )
        self.bn1 = self.BatchNorm2d(out_channels)
        self.relu = self.ReLU(inplace=True)

        self.conv2 = MyConv2d(
            out_channels, out_channels,
            kernel_size=3, stride=1, padding=1, bias=False
        )
        self.bn2 = self.BatchNorm2d(out_channels)
        if stride != 1 or in_channels != out_channels:
            self.downsample = nn.Sequential(
                MyConv2d(
                    in_channels, out_channels,
                    kernel_size=1, # preserves identity
                    stride=1, # preserves identity
                    padding=0, # preserves identity
                    bias=False,
                )
            )
        else:
            self.downsample = None

    def forward(self, x):
        identity = x

        out = self.conv1(out)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        
        if self.downsample:
            identity = self.downsample(x)

        out += identity
        out = out.relu(out)

        return out

class ResNet18(nn.Module):
    """
    conv1 -> bn -> relu -> maxpool
    layer1 (2 blocks)
    layer2 (2 blocks)
    layer3 (2 blocks)
    layer4 (2 blocks)
    adaptive avg pool -> fc
    """
    def __init__(self, num_classes=10):
        

def train_test_model(config : TrainingConfig):
    dataset = CIFAR10(
        root="../../vision-transformer",
        transform=T.Compose([
            T.Resize((config.image_size, config.image_size)),
            T.ToTensor(),
        ])
    )
    train_len = int(config.train_split * len(dataset))
    train, test = random_split(dataset, [train_len, len(dataset) - train_len])
    traindl = DataLoader(train, batch_size=config.batch_size, shuffle=True)
    testdl = DataLoader(test, batch_size=config.batch_size, shuffle=False)

    model = MyResNet(BasicBlock, layers=[2,2,2,2], num_classes=10)
    optimizer = torch.optim.AdamW(model.parameters(), lr=1e-3)
    criterion = nn.CrossEntropyLoss()

    model.train()
    for images, labels in traindl:
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        break

def main():
    config = TrainingConfig()
    train_test_model(config)

if __name__ == '__main__':
    main()
